/*
	基于rank的优化：
		对于上次说的基于size的优化还是有些缺点的，在考虑最差的方案时，当有多个元素的父亲时同一个元素时利用size判断，它的并集时依旧会出
		先问题，比如说当以7为根的节点与根为8的节点合并时，因为7的元素较多所以会出现以8 为根的元素合并到其上，从而时树的层树为4，但是
		当7 接到8 上的时候层数就从4变成3了。
		所以我们出现了对于树的层数的优化，我们只比较合并元素的层数，从而达到对合并速度的优化
		设置rank【i】为以i为根节点的树的层数
*/



#include<iostream>
#include<cassert>

using namespace std;
namespace UF2{
	class UnionFind3{
		private :
			int * parent;
			int * rank[];
			int count;

		public :
			QuickUnion( int count ){
				parent = new int[count];
				rank = new int [count];
				this -> count = count;
				for( int i = 0 ; i < count ; i++)
					parent[i] = i;
					rank[i] = 1;//因为刚开始每个节点都是一个元素，所以sz的值都为1
			}

			~QuickUnion(){
				delete[] parent;
				delete[] rank;
 			}
 			int find( int p ){
 				assert( p >= 0 && p< count );
 				while ( p != parent[p] )
 					p = parent[p];
 				return p;
 			}
 			bool idConnected( int p , int q ){
 				return find[p] == find[q];
 			}
 			void unionElement( int p , int q ){
 				pRoot = find[p];
 				qRoot = find[q];

 				if( pRoot == qRoot )
 					return ;
 				//在使用层数判断时不必考虑将rank扩大的问题，因为放一个比另一个层数大时只可能是，合并完的新树的层数只可能小于等于原来的
 				if( rank[pRoot] > rank[qRoot] ){
 					parent[qRoot] = pRoot;
 				}else if( rank[pRoot] > rank[qRoot] ){
 					parent [pRoot] = qRoot;
 				}else{
 					 //当  rank[qroot] = rank[proot]
 					//当两个树的层数相同时随便将父节点赋给另一个，但是需将层数u扩大1，来维护新的树的高度
 					parent[qRoot] = pRoot;
 					rank[pRoot] += 1;
 				}
 				
 			}


	}
}

